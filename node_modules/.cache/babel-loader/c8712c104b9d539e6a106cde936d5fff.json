{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nconst config = {\n  apiKey: \"AIzaSyCH9lix6WQTKrKIeLHR_iEBnt1foYT1Zkk\",\n  authDomain: \"olx-clonee.firebaseapp.com\",\n  databaseURL: \"https://olx-clonee.firebaseio.com\",\n  projectId: \"olx-clonee\",\n  storageBucket: \"olx-clonee.appspot.com\",\n  messagingSenderId: \"1047381091746\",\n  appId: \"1:1047381091746:web:daf7b33f9294a831e8fefb\",\n  measurementId: \"G-1Q5DL21TXJ\"\n};\nfirebase.initializeApp(config);\nexport default firebase; // import firebase from './new'\n// class Firebase {\n//   constructor() {\n//     // firebase.initializeApp(config);\n//     this.auth = App.auth();\n//     // this.database = App.database();\n//     this.store = App.firestore();\n//     this.storage = App.storage();\n//     this.fire = App.firestore;\n//   }\n//   // *** Auth API ***\n//   doCreateUserWithEmailAndPassword = (email, password) =>\n//     this.auth.createUserWithEmailAndPassword(email, password);\n//   doSignInWithEmailAndPassword = (email, password) =>\n//     this.auth.signInWithEmailAndPassword(email, password);\n//   doSignOut = () => {\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"Projects\");\n//     this.auth.signOut();\n//   };\n//   doPasswordReset = (email) => this.auth.sendPasswordResetEmail(email);\n//   doPasswordUpdate = (password) =>\n//     this.auth.currentUser.updatePassword(password);\n//   createUser = (currentUserId, data) =>\n//     this.store.collection(\"users\").doc(currentUserId).set(data);\n//   getUser = (currentUserId) =>\n//     this.store.collection(\"users\").doc(currentUserId);\n//   updateUserInfo = (currentUserId, data) =>\n//     this.store\n//       .collection(\"users\")\n//       .doc(currentUserId)\n//       .set(data, { merge: true });\n//   uploadImage = async (filename, file) => {\n//     const storage = this.storage.ref().child(filename);\n//     await storage.put(file);\n//     const url = await storage.getDownloadURL();\n//     return url;\n//   };\n//   createNewProject = (data) =>\n//     this.store.collection(\"projects\").doc(data.projectId).set(data);\n//   qurey = async (email) => {\n//     try {\n//       let data;\n//       await this.store\n//         .collection(\"users\")\n//         .where(\"email\", \"==\", email)\n//         .get()\n//         .then((querySnapshot) => {\n//           querySnapshot.forEach((doc) => {\n//             // console.log(doc.id, ' => ', doc.data());\n//             data = doc.id;\n//           });\n//         });\n//       return data;\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   timeStamp = () => firebase.firestore.Timestamp.now().seconds;\n//   getUserData = async (currentUserId) => {\n//     try {\n//       const user = await this.store\n//         .collection(\"users\")\n//         .doc(currentUserId)\n//         .get()\n//         .then((doc) => {\n//           // console.log(doc.id, 'doc, id')\n//           let data = { ...doc.data() };\n//           data.id = doc.id;\n//           return data;\n//         });\n//       return user;\n//     } catch (error) {\n//       console.log(error.message, \" error message\");\n//     }\n//   };\n//   getProjectData = async () => {\n//     try {\n//       const data = await this.store\n//         .collection(\"projects\")\n//         .get()\n//         .then(function (querySnapshot) {\n//           const arr = [];\n//           querySnapshot.forEach(function (doc) {\n//             // doc.data() is never undefined for query doc snapshots\n//             //  console.log(doc.id, \" => \", doc.data());\n//             arr.push(doc.data());\n//           });\n//           return arr;\n//         });\n//       return data;\n//     } catch (error) {\n//       console.log(error, \"error\");\n//     }\n//   };\n//   deleteProject = async (projectId, userId) => {\n//     try {\n//       let user = await this.getUserData(userId);\n//       console.log(firebase.firestore.Timestamp.now().seconds);\n//       // let filteredList = user.projects.filter(val => val !== projectId)\n//       // await this.newProjectId(userId,filteredList);\n//       if (user.projectId === projectId) {\n//         await this.store\n//           .collection(\"users\")\n//           .doc(userId)\n//           .update({ projectId: firebase.firestore.FieldValue.delete() });\n//       }\n//       let deletedProject = await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .update({\n//           deleted: true,\n//           active: false,\n//           deletedAt: firebase.firestore.Timestamp.now().seconds,\n//         });\n//       console.log(deletedProject, \" deletedProject\");\n//       return deletedProject;\n//     } catch (error) {\n//       console.log(error, \"error\");\n//       throw error;\n//     }\n//   };\n//   updateUserProjects = (userId, arry) => {\n//     // debugger\n//     try {\n//       this.store.collection(\"users\").doc(userId).update({\n//         projects: arry,\n//       });\n//     } catch (error) {\n//       return error;\n//     }\n//   };\n//   getSingleProjectData = async (projectId) => {\n//     try {\n//       const data = await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .get()\n//         .then((doc) => doc.data());\n//       return data;\n//     } catch (error) {\n//       console.log(error, \"error\");\n//     }\n//   };\n//   updateProjectUsers = (projectId, arry) => {\n//     // debugger\n//     try {\n//       this.store.collection(\"projects\").doc(projectId).update({\n//         users: arry,\n//       });\n//     } catch (error) {\n//       return error;\n//     }\n//   };\n//   getRoleUsers = async (projectId, roles) => {\n//     try {\n//       let roleData;\n//       await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .collection(\"roles\")\n//         .where(\"roleName\", \"==\", roles)\n//         .get()\n//         .then((querySnapshot) => {\n//           querySnapshot.forEach((doc) => {\n//             //  console.log(doc.id, ' => ', doc.data());\n//             let data = { ...doc.data() };\n//             data.id = doc.id;\n//             roleData = data;\n//           });\n//         });\n//       return roleData;\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   getRoles = async (projectId) => {\n//     try {\n//       let rolesArry = [];\n//       await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .collection(\"roles\")\n//         .get()\n//         .then((querySnapshot) => {\n//           querySnapshot.forEach((doc) => {\n//             // console.log(doc.id, ' => ', doc.data());\n//             let data = { ...doc.data() };\n//             data.id = doc.id;\n//             rolesArry.push(data);\n//             // roleData = data\n//           });\n//           // console.log(rolesArry)\n//         });\n//       return rolesArry;\n//     } catch (error) {\n//       console.log(error, \" error\");\n//     }\n//   };\n//   updateRoleUsers = async (projectId, id, array) => {\n//     try {\n//       await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .collection(\"roles\")\n//         .doc(id)\n//         .update({\n//           Users: array,\n//         });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   updateProjectPendingRegistration = (projectId, arry) => {\n//     // debugger\n//     try {\n//       this.store.collection(\"projects\").doc(projectId).update({\n//         pendingRegistrations: arry,\n//       });\n//     } catch (error) {\n//       return error;\n//     }\n//   };\n//   user = (uid) => this.store.collection(\"users\").where(\"uid\", \"==\", uid);\n//   users = () => (this.users = this.store.collection(\"users\"));\n// }\n// export default new Firebase();","map":{"version":3,"sources":["C:/Users/Jony/Desktop/bebsha-lagbe-jony/src/config/firebase.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAO,oBAAP;AACA,OAAO,kBAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,4BAFC;AAGbC,EAAAA,WAAW,EAAE,mCAHA;AAIbC,EAAAA,SAAS,EAAE,YAJE;AAKbC,EAAAA,aAAa,EAAE,wBALF;AAMbC,EAAAA,iBAAiB,EAAE,eANN;AAObC,EAAAA,KAAK,EAAE,4CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAUAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AACA,eAAeD,QAAfsourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst config = {\n  apiKey: \"AIzaSyCH9lix6WQTKrKIeLHR_iEBnt1foYT1Zkk\",\n  authDomain: \"olx-clonee.firebaseapp.com\",\n  databaseURL: \"https://olx-clonee.firebaseio.com\",\n  projectId: \"olx-clonee\",\n  storageBucket: \"olx-clonee.appspot.com\",\n  messagingSenderId: \"1047381091746\",\n  appId: \"1:1047381091746:web:daf7b33f9294a831e8fefb\",\n  measurementId: \"G-1Q5DL21TXJ\",\n};\nfirebase.initializeApp(config);\nexport default firebase;\n\n// import firebase from './new'\n\n// class Firebase {\n//   constructor() {\n//     // firebase.initializeApp(config);\n//     this.auth = App.auth();\n//     // this.database = App.database();\n//     this.store = App.firestore();\n//     this.storage = App.storage();\n//     this.fire = App.firestore;\n//   }\n\n//   // *** Auth API ***\n//   doCreateUserWithEmailAndPassword = (email, password) =>\n//     this.auth.createUserWithEmailAndPassword(email, password);\n\n//   doSignInWithEmailAndPassword = (email, password) =>\n//     this.auth.signInWithEmailAndPassword(email, password);\n\n//   doSignOut = () => {\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"Projects\");\n//     this.auth.signOut();\n//   };\n\n//   doPasswordReset = (email) => this.auth.sendPasswordResetEmail(email);\n//   doPasswordUpdate = (password) =>\n//     this.auth.currentUser.updatePassword(password);\n\n//   createUser = (currentUserId, data) =>\n//     this.store.collection(\"users\").doc(currentUserId).set(data);\n//   getUser = (currentUserId) =>\n//     this.store.collection(\"users\").doc(currentUserId);\n//   updateUserInfo = (currentUserId, data) =>\n//     this.store\n//       .collection(\"users\")\n//       .doc(currentUserId)\n//       .set(data, { merge: true });\n\n//   uploadImage = async (filename, file) => {\n//     const storage = this.storage.ref().child(filename);\n//     await storage.put(file);\n//     const url = await storage.getDownloadURL();\n//     return url;\n//   };\n\n//   createNewProject = (data) =>\n//     this.store.collection(\"projects\").doc(data.projectId).set(data);\n\n//   qurey = async (email) => {\n//     try {\n//       let data;\n//       await this.store\n//         .collection(\"users\")\n//         .where(\"email\", \"==\", email)\n//         .get()\n//         .then((querySnapshot) => {\n//           querySnapshot.forEach((doc) => {\n//             // console.log(doc.id, ' => ', doc.data());\n//             data = doc.id;\n//           });\n//         });\n//       return data;\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   timeStamp = () => firebase.firestore.Timestamp.now().seconds;\n\n//   getUserData = async (currentUserId) => {\n//     try {\n//       const user = await this.store\n//         .collection(\"users\")\n//         .doc(currentUserId)\n//         .get()\n//         .then((doc) => {\n//           // console.log(doc.id, 'doc, id')\n//           let data = { ...doc.data() };\n//           data.id = doc.id;\n//           return data;\n//         });\n//       return user;\n//     } catch (error) {\n//       console.log(error.message, \" error message\");\n//     }\n//   };\n\n//   getProjectData = async () => {\n//     try {\n//       const data = await this.store\n//         .collection(\"projects\")\n//         .get()\n//         .then(function (querySnapshot) {\n//           const arr = [];\n//           querySnapshot.forEach(function (doc) {\n//             // doc.data() is never undefined for query doc snapshots\n//             //  console.log(doc.id, \" => \", doc.data());\n//             arr.push(doc.data());\n//           });\n//           return arr;\n//         });\n//       return data;\n//     } catch (error) {\n//       console.log(error, \"error\");\n//     }\n//   };\n\n//   deleteProject = async (projectId, userId) => {\n//     try {\n//       let user = await this.getUserData(userId);\n//       console.log(firebase.firestore.Timestamp.now().seconds);\n//       // let filteredList = user.projects.filter(val => val !== projectId)\n//       // await this.newProjectId(userId,filteredList);\n//       if (user.projectId === projectId) {\n//         await this.store\n//           .collection(\"users\")\n//           .doc(userId)\n//           .update({ projectId: firebase.firestore.FieldValue.delete() });\n//       }\n//       let deletedProject = await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .update({\n//           deleted: true,\n//           active: false,\n//           deletedAt: firebase.firestore.Timestamp.now().seconds,\n//         });\n//       console.log(deletedProject, \" deletedProject\");\n//       return deletedProject;\n//     } catch (error) {\n//       console.log(error, \"error\");\n//       throw error;\n//     }\n//   };\n\n//   updateUserProjects = (userId, arry) => {\n//     // debugger\n//     try {\n//       this.store.collection(\"users\").doc(userId).update({\n//         projects: arry,\n//       });\n//     } catch (error) {\n//       return error;\n//     }\n//   };\n\n//   getSingleProjectData = async (projectId) => {\n//     try {\n//       const data = await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .get()\n//         .then((doc) => doc.data());\n//       return data;\n//     } catch (error) {\n//       console.log(error, \"error\");\n//     }\n//   };\n\n//   updateProjectUsers = (projectId, arry) => {\n//     // debugger\n//     try {\n//       this.store.collection(\"projects\").doc(projectId).update({\n//         users: arry,\n//       });\n//     } catch (error) {\n//       return error;\n//     }\n//   };\n\n//   getRoleUsers = async (projectId, roles) => {\n//     try {\n//       let roleData;\n//       await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .collection(\"roles\")\n//         .where(\"roleName\", \"==\", roles)\n//         .get()\n//         .then((querySnapshot) => {\n//           querySnapshot.forEach((doc) => {\n//             //  console.log(doc.id, ' => ', doc.data());\n//             let data = { ...doc.data() };\n//             data.id = doc.id;\n//             roleData = data;\n//           });\n//         });\n//       return roleData;\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   getRoles = async (projectId) => {\n//     try {\n//       let rolesArry = [];\n//       await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .collection(\"roles\")\n//         .get()\n//         .then((querySnapshot) => {\n//           querySnapshot.forEach((doc) => {\n//             // console.log(doc.id, ' => ', doc.data());\n//             let data = { ...doc.data() };\n//             data.id = doc.id;\n//             rolesArry.push(data);\n//             // roleData = data\n//           });\n//           // console.log(rolesArry)\n//         });\n//       return rolesArry;\n//     } catch (error) {\n//       console.log(error, \" error\");\n//     }\n//   };\n\n//   updateRoleUsers = async (projectId, id, array) => {\n//     try {\n//       await this.store\n//         .collection(\"projects\")\n//         .doc(projectId)\n//         .collection(\"roles\")\n//         .doc(id)\n//         .update({\n//           Users: array,\n//         });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   updateProjectPendingRegistration = (projectId, arry) => {\n//     // debugger\n//     try {\n//       this.store.collection(\"projects\").doc(projectId).update({\n//         pendingRegistrations: arry,\n//       });\n//     } catch (error) {\n//       return error;\n//     }\n//   };\n//   user = (uid) => this.store.collection(\"users\").where(\"uid\", \"==\", uid);\n//   users = () => (this.users = this.store.collection(\"users\"));\n// }\n// export default new Firebase();\n"]},"metadata":{},"sourceType":"module"}